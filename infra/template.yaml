AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Core infra for an ECS cluster

Parameters:
  ENVIRONMENT:
    Type: String
    AllowedValues:
      - prod
      - dev
    Default: dev
    ConstraintDescription: must specify staging, dev or prod
  SERVICENAME:
    Type: String
  APPIMAGE:
    Type: String
    Description: Image of app to deploy
  ENVOYIMAGE:
    Type: String
    Description: Image of app to deploy

Resources:
  # VPC
  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.11.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: myVPC

  # INTERNET GATEWAY
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref InternetGateway

  # SUBNETS
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs ""
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.11.0.0/24
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs ""
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.11.1.0/24
      Tags:
        - Key: Name
          Value: PublicSubnet2

  # ROUTE TABLES
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ALB SECURITY GROUP
  ALBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Accepts incoming traffic on port 80
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # CONTAINER SECURITY GROUP
  ContainerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Accepts incoming only from ALB sec group
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8081
          ToPort: 8081
          SourceSecurityGroupId: !GetAtt ALBSecGroup.GroupId

  # ECS CLUSTER
  ECSCluster:
    Type: AWS::ECS::Cluster

  # Load balancer
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecGroup

  # Target group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      HealthCheckIntervalSeconds: 10 # Perform healthcheck every x
      HealthCheckPath: /healthcheck # A health check is a ping to this path
      HealthCheckProtocol: HTTP # Which protocol to use for the healthcheck
      HealthCheckTimeoutSeconds: 4 # If no response within x, the healthcheck fails
      HealthyThresholdCount: 2 # After x successfull healthchecks, the target is considered healthy
      Matcher:
        HttpCode: "200-299" # Defines what is considered healthy response
      Port: 8081 # Where do the target accept traffic?
      Protocol: HTTP # With which protocol to route the traffic
      UnhealthyThresholdCount: 3 # After x unsuccessful health checks, the target is considered unhealthy
      VpcId: !Ref ClusterVPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds # when deregistering targets, they're drained for x seconds
          Value: "5"
        - Key: slow_start.duration_seconds # When a new target is registered, traffic is gradually increased to that target for x seconds until it reaches it's fair share.
          Value: "60"

  # Load balancer listener -- (The listener ties the target group and load balancer together)
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - PublicLoadBalancer
    Properties:
      DefaultActions: # "Forward" traffic enetering on Port (below) "this targetgroup"
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      LoadBalancerArn: !Ref "PublicLoadBalancer" # Attach listener to this load balancer
      Port: 80 # Route the traffic hitting this port
      Protocol: HTTP # Route the traffic using this protocol

  # APP TASK DEFINITION
  AppTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "1024"
      Memory: "2048"
      ContainerDefinitions:
        - Name: app-container
          Image: !Ref APPIMAGE
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServiceLogGroup
              awslogs-region: eu-west-1
              awslogs-stream-prefix: !Ref SERVICENAME
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
        - Name: envoy-proxy
          Image: !Ref ENVOYIMAGE
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ServiceLogGroup
              awslogs-region: eu-west-1
              awslogs-stream-prefix: envoy
      Family: !Sub ${SERVICENAME}-task-def
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: arn:aws:iam::192114778981:role/ecsTaskExecutionRole # For ECS to pull images, send logs to cloudwatch, etc. https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html

  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - PublicLoadBalancer
    Properties:
      ServiceName: !Ref SERVICENAME
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref AppTaskDefinition # Which is created above
      DeploymentConfiguration: # specifies in how large batches we can deploy new tasks. depends on deployment method.
        MaximumPercent: 200 # When deploying, allow at most 200% of the desired task count
        MinimumHealthyPercent: 100 # When deploying, ensure at least 50% of the desired task count is in the running state
      DeploymentController:
        Type: ECS
      DesiredCount: 2
      EnableECSManagedTags: false # The new ARN and resource ID format must be enabled to work with ECS managed tags.
      HealthCheckGracePeriodSeconds: 25 # Give the container x seconds after start-up before helth-check from ALB starts coming in.
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerPort: 8081
          ContainerName: envoy-proxy # From container def above
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecGroup # SecGroup to use for the service
          Subnets: # Which subnets does the service operate
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA

Outputs:
  DNSName:
    Value: !GetAtt PublicLoadBalancer.DNSName
